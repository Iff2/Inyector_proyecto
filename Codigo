// #include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "Adafruit_VL53L0X.h"
#include <SoftwareSerial.h>
//#include <Stepper.h>
Adafruit_VL53L0X lox = Adafruit_VL53L0X();
// int clockwise= 3; //boton con pin D9
// int anticlockwise= 2; //boton con pin D2
// int steps =200; //numero de pasos del motor
// int enable=8; // pin D8 para los EN1 y EN2
int r = 0; //variable donde se almacena la velocidad
float Sensibilidad=0.185; //sensibilidad en Voltios/Amperio para sensor de 5A
/************************************ Pines *********************************/
// Arreglo de botones y último estado del botón
// Nota: Los siguientes "DEFINE" son únicamente para
// mejorar la lectura del código al momento de codificar.
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define ANCHO_PANTALLA 128 // ancho pantalla OLED
#define ALTO_PANTALLA 64 // alto pantalla OLED
#define BTN_MENU  0
#define BTN_UP    1
#define BTN_DOWN  2
#define stepPin 10
#define dirPin 11
#define button1 2
#define button2 3
#define M1 7
#define M2 8
#define M3 9

// Objeto de la clase Adafruit_SSD1306
Adafruit_SSD1306 display(ANCHO_PANTALLA, ALTO_PANTALLA, &Wire, -1);

// LiquidCrystal_I2C lcd(0x27,16,2); //Dirección de la pantalla LCD

// Este arreglo contiene los pines utilizados para los botones
uint8_t button[3] = {
  4,
  5,
  6
};

// Este arreglo contiene el último estado conocido de cada línea
uint8_t button_estate[3];

/********************************* Globales *********************************/
// Estado de nuestro autómata
#define S_HOME  0
#define S_SET_R 1
#define S_SET_G 2

uint8_t estado = S_HOME;
// Helpers
// Stepper motor(steps, 4,5,6,7);


static const uint8_t PROGMEM image_data_oggra[1024] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x01, 0xff, 0x0f, 0xff, 0xff, 0x00, 0x00, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xfe, 0x0f, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xfe, 0x0f, 0xc1, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x03, 0xfc, 0x0f, 0x81, 0xfe, 0x00, 0x00, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xe0, 0x00, 0x7f, 0xff, 0xf8, 0x0f, 0x80, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xc0, 0x00, 0xff, 0xff, 0xf8, 0x0f, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xf0, 0x0f, 0x00, 0xff, 0xff, 0xfe, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0x80, 0x03, 0xff, 0xff, 0xf0, 0x0e, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x1e, 0x01, 0xff, 0xff, 0xfc, 0x00, 0x7f, 0xff, 
    0xff, 0xff, 0xff, 0x00, 0x0f, 0xff, 0xff, 0x80, 0x3c, 0x00, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0xff, 0xff, 
    0xff, 0xff, 0xfe, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x07, 0xf0, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x07, 0xf0, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xfc, 0x00, 0x3c, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x07, 0xe0, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x3c, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x07, 0xc0, 0x03, 0xff, 0xff, 
    0xff, 0xff, 0xf8, 0x00, 0x78, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x07, 0xc0, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0x70, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x07, 0x80, 0x07, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x00, 0xf0, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x0f, 0x80, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x00, 0xe0, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x0f, 0x00, 0x0f, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x1f, 0x00, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x01, 0xe0, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x03, 0xe0, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x03, 0xfc, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x3f, 0xff, 0xff, 
    0xff, 0xff, 0x80, 0x07, 0xff, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x7f, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x07, 0xff, 0xff, 0xe0, 0x1c, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x7f, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x38, 0x03, 0xff, 0xff, 0xf8, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x38, 0x03, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0x1f, 0xff, 0xff, 0x80, 0x70, 0x07, 0xff, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0x00, 0x00, 0xff, 0x80, 0x70, 0x0f, 0xc0, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x00, 0x00, 0x00, 0xff, 0x00, 0xe0, 0x0f, 0x80, 0x00, 0x00, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x00, 0x00, 0x00, 0xfe, 0x00, 0xe0, 0x1f, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xc0, 0x00, 0x00, 0xff, 0xc1, 0xfc, 0x3f, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x3f, 0xfb, 0xff, 0x0f, 0xfe, 0x3f, 0xf1, 0xff, 0x8f, 0xfe, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0xdf, 0xfb, 0xff, 0x6f, 0xfd, 0xbf, 0xfb, 0xff, 0x6f, 0xfd, 0xbf, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0xff, 0xfb, 0xff, 0x6f, 0xfc, 0xbf, 0xf7, 0xff, 0x2f, 0xfd, 0xbf, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0xff, 0xff, 0xfe, 0xef, 0xfd, 0xff, 0xf7, 0xff, 0x7f, 0xff, 0xbf, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xbf, 0xf7, 0xfe, 0xdf, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x3f, 0xf7, 0xff, 0x1f, 0xfc, 0x7f, 0xf7, 0xff, 0x1f, 0xfc, 0x7f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


static const uint8_t PROGMEM image_data_uaq[1024] = {
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xf8, 0x3f, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0e, 0x03, 0xc0, 0x7f, 0xff, 
    0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x30, 0x00, 0x01, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xe0, 0xf0, 0x00, 0x1f, 0xff, 0xff, 
    0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0xff, 0x83, 0xf8, 0x00, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xe0, 0xff, 0xbf, 0xff, 0xfe, 0x00, 0x00, 0x78, 0x0f, 0xff, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0x81, 0xf0, 0x00, 0x3f, 0xc0, 0x00, 0x18, 0x00, 0x7f, 0xfc, 0x0f, 0xff, 0xff, 0xff, 
    0xff, 0xf8, 0x07, 0xc0, 0x00, 0x3e, 0x03, 0x80, 0x00, 0x07, 0xff, 0xf0, 0x7f, 0xff, 0xff, 0xff, 
    0xf8, 0x00, 0x0f, 0xc0, 0x0e, 0x00, 0x3e, 0x0f, 0xfe, 0x1f, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 
    0x00, 0x0f, 0x1f, 0xe0, 0x00, 0x01, 0xfc, 0x3f, 0xfe, 0x1f, 0xff, 0x07, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xfe, 0x1f, 0xc1, 0xc7, 0x87, 0xf0, 0x7f, 0xfe, 0x1f, 0xfc, 0x1e, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x3f, 0x87, 0xff, 0x87, 0xe1, 0xff, 0xfe, 0x3f, 0xf0, 0x70, 0x03, 0xff, 0xff, 0xff, 
    0xff, 0xfc, 0x7e, 0x0f, 0xff, 0x87, 0x83, 0xff, 0xfc, 0x3f, 0xc1, 0x83, 0x07, 0xff, 0xff, 0xff, 
    0xff, 0xf8, 0x7c, 0x3f, 0xff, 0x87, 0x0f, 0xff, 0xf8, 0x7f, 0x07, 0x0c, 0x1f, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0xf8, 0x7f, 0xff, 0x8f, 0x1f, 0xff, 0xf0, 0xfc, 0x1e, 0x00, 0x7f, 0xff, 0xff, 0xff, 
    0xff, 0xf0, 0xf0, 0xff, 0xff, 0x0e, 0x1f, 0xff, 0xe1, 0xf0, 0x7f, 0x01, 0xf0, 0x3f, 0xff, 0xff, 
    0xff, 0xe1, 0xf1, 0xff, 0xfe, 0x1c, 0x3f, 0xff, 0x87, 0xe1, 0xff, 0xff, 0x80, 0x00, 0x7f, 0xff, 
    0xff, 0xe3, 0xe1, 0xff, 0xfc, 0x3c, 0x3f, 0xfe, 0x0f, 0x83, 0xff, 0xf8, 0x3f, 0xff, 0x07, 0xff, 
    0xff, 0xc3, 0xe3, 0xff, 0xf8, 0x7c, 0x3f, 0xf0, 0x3e, 0x03, 0xfc, 0x01, 0xff, 0xff, 0xf1, 0xff, 
    0xff, 0xc7, 0xc3, 0xff, 0xe0, 0xfe, 0x00, 0x01, 0xfc, 0x07, 0xf0, 0xff, 0x00, 0x03, 0xfc, 0x7f, 
    0xff, 0x87, 0xc3, 0xff, 0x83, 0xff, 0x80, 0x0f, 0xff, 0x3f, 0xe3, 0xf8, 0x7f, 0xf8, 0x7f, 0x1f, 
    0xff, 0x8f, 0xe1, 0xfc, 0x0f, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xcf, 0xe3, 0xff, 0xff, 0x1f, 0xcf, 
    0xff, 0x0f, 0xe0, 0x00, 0x7f, 0xe0, 0x3f, 0xff, 0x0f, 0xff, 0x9f, 0xcf, 0xff, 0xff, 0xcf, 0xe7, 
    0xff, 0x1f, 0xfc, 0x07, 0xff, 0xe7, 0x7f, 0xfe, 0x67, 0xff, 0x3f, 0xbf, 0xff, 0xff, 0xe7, 0xf3, 
    0xfe, 0x1f, 0xff, 0xff, 0xff, 0xe7, 0x7f, 0xfc, 0xf3, 0xfe, 0x7f, 0x3f, 0xff, 0xff, 0xf3, 0xf9, 
    0xfe, 0x3f, 0xfe, 0x07, 0xff, 0xe7, 0x7f, 0xf9, 0xf9, 0xfe, 0xfe, 0x7f, 0xff, 0xff, 0xf9, 0xfd, 
    0xfc, 0x3f, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0xf3, 0xf9, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xfd, 0xfd, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0xe7, 0x1c, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xfd, 0xfc, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0xc6, 0x6e, 0x7e, 0xfe, 0xff, 0xff, 0xff, 0xf9, 0xfd, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0x8c, 0xe7, 0x3e, 0xfe, 0x7f, 0xff, 0xff, 0xf9, 0xfd, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0x99, 0xf3, 0x9e, 0x7f, 0x3f, 0xff, 0xff, 0xf3, 0xf9, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7f, 0x33, 0xf9, 0xcf, 0x3f, 0x9f, 0xff, 0xff, 0xe7, 0xf3, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7e, 0x78, 0x03, 0xe7, 0x9f, 0xcf, 0xff, 0xff, 0xcf, 0xe7, 
    0xff, 0xff, 0xfe, 0xf7, 0xff, 0xe7, 0x7c, 0xfc, 0x07, 0xf3, 0xcf, 0xe1, 0xff, 0xfe, 0x1f, 0xcf, 
    0xff, 0xff, 0xfe, 0x73, 0xff, 0xef, 0x79, 0xc0, 0x00, 0x39, 0xe3, 0xf8, 0x1f, 0xe0, 0xff, 0x1f, 
    0xff, 0xff, 0xff, 0x39, 0xff, 0xde, 0x73, 0x9f, 0xff, 0x9c, 0xf8, 0xff, 0x80, 0x07, 0xfc, 0x7f, 
    0xff, 0xff, 0xff, 0x8c, 0x3e, 0x38, 0xe7, 0x3f, 0xff, 0xce, 0xfe, 0x1f, 0xff, 0xff, 0xe1, 0xff, 
    0xff, 0xff, 0xff, 0xe1, 0x00, 0xc1, 0xce, 0x7f, 0xff, 0xcf, 0x7f, 0xc0, 0xff, 0xff, 0xcf, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x0f, 0x80, 0xff, 0xff, 0xe0, 0x3f, 0xfc, 0x00, 0xff, 0xdf, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x01, 0xef, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x07, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};


void setup() {
Wire.begin();

pinMode(stepPin , OUTPUT);
pinMode(dirPin , OUTPUT);
pinMode(M1 , OUTPUT);
pinMode(M2 , OUTPUT);
pinMode(M3 , OUTPUT);
// pinMode(clockwise,INPUT);
// //pinMode(anticlockwise,INPUT);
// pinMode(enable,OUTPUT);
// Configurar como PULL-UP para ahorrar resistencias
pinMode(button[BTN_MENU], INPUT_PULLUP);
pinMode(button[BTN_UP], INPUT_PULLUP);
pinMode(button[BTN_DOWN], INPUT_PULLUP);
pinMode(button1, INPUT_PULLUP);
pinMode(button2, INPUT_PULLUP);

  // Se asume que el estado inicial es HIGH
button_estate[0] = HIGH;
button_estate[1] = HIGH;
button_estate[2] = HIGH;

  // Iniciar helpers
// lcd.init();
// lcd.backlight();
 // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
 if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
#ifdef __DEBUG__
    Serial.println("No se encuentra la pantalla OLED");
#endif
    while (true);
  }
  display.clearDisplay();
  display.drawBitmap(0, 0, image_data_oggra, 128, 64, SSD1306_WHITE);
  display.display();
  delay(5000);

  display.clearDisplay();
  display.drawBitmap(0, 0, image_data_uaq, 128, 64, SSD1306_WHITE);
  display.display();
  delay(5000);

  display.clearDisplay();
  display.setTextSize(1.9); // Draw 1X-scale text
  display.setTextColor(SSD1306_WHITE);

  // Desplegar la info por defecto
// Iniciar sensor
  Serial.println("VL53L0X test");
  if (!lox.begin()) {
    Serial.println(F("Error al iniciar VL53L0X"));
    while(1);
  }

printHome();

// let's set an initial value of low to both our step and dir pins, we could easily write false or 0 instead of LOW
digitalWrite(stepPin , LOW);
digitalWrite(dirPin , LOW);
digitalWrite(M1 , LOW);
digitalWrite(M2 , LOW);
digitalWrite(M3 , LOW);



Serial.begin(9600);
}


// Facilita la detección de flancos de subidan en los pines
// monitoreados. Asume la existencia de un arreglo button
// con la asignación actual de pines y un arreglo button_estate
// con los valores de línea
uint8_t flancoSubida(int btn) {
  uint8_t valor_nuevo = digitalRead(button[btn]);
  uint8_t result = button_estate[btn]!=valor_nuevo && valor_nuevo == 1;
  button_estate[btn] = valor_nuevo;
  return result;
}
/******************* Utilitarios de dibujado ****************************/
void printHome() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("    WELCOME USER");
  display.println("      ");
  display.println("      ");
  display.println("      ");
  display.println("  press Start button");
  display.display();
}

void printRed() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("      SET SPEED");
  display.println("      ");
  display.println("      ");
  printColor();
  display.display();
}

void printGreen() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.println("        READY");
  display.println("      ");
  display.println("      ");
  display.println("   PRESS THE SWITCH");
  display.println("      ");
  display.println("     LEFT OR RIGHT");
  display.display();
}

void printColor() {
  display.setCursor(60, 20);
  display.println(r, DEC);
  display.println("   ");
  display.println("   ");
  display.println("DELAY BETWEEN 0 - 299");
}


void loop() {
  VL53L0X_RangingMeasurementData_t measure;
//int Speed = analogRead(A0);
int RPM = r;
float I=0;
float dist = 0;
bool gra = false;
// int forward = digitalRead(clockwise);
// int reverse = digitalRead(anticlockwise);
// digitalWrite(enable,LOW);
Serial.print("Leyendo sensor... ");
  lox.rangingTest(&measure, false); // si se pasa true como parametro, muestra por puerto serie datos de debug
  if (measure.RangeStatus != 4)
  {
  //   Serial.print("Distancia (mm): ");
  //  Serial.println(measure.RangeMilliMeter);
  } 
  else
  {
    Serial.println("  Fuera de rango ");
  }
  dist=measure.RangeMilliMeter;

//***********************************************************
  float voltajeSensor= analogRead(A1)*(5.0 / 1023.0); //lectura del sensor   
  I=(voltajeSensor-2.5)/Sensibilidad; //Ecuación  para obtener la corriente
  Serial.print("Corriente: ");
  Serial.println(I,3);
//***********************************************************
switch(estado) {
    case S_HOME: /*** INICIO ESTADO S_HOME ***/
      if(flancoSubida(BTN_MENU)) { // Transición BTN_MENU
        estado = S_SET_R;
        printRed();
        break;
      }
      break; /*** FIN ESTADO S_HOME ***/
    case S_SET_R: /*** INICIO ESTADO S_SET_R ***/
      if(flancoSubida(BTN_MENU)) { // Transición BTN_MENU
        estado = S_SET_G;
        printGreen();
        break;
      }
      if(flancoSubida(BTN_UP)) { // Transición BTN_UP
        if(r<300) {
          r++;
        } else {
          r = 0;
        }
        printRed();
        // Serial.println(r);
        break;
      }
      if(flancoSubida(BTN_DOWN)) { // Transición BTN_DWN
        if(r>0) {
          r--;
        } else {
          r = 300;
        }
        printRed();
        // Serial.println(r);
        break;
      }
      break; /*** FIN ESTADO S_SET_R ***/

      case S_SET_G: /*** INICIA ESTADO S_SET_G ***/
    if (digitalRead(button1) == LOW && digitalRead(button2) == HIGH ) { // if button1 is pressed and button2 is not pressed
    digitalWrite(dirPin, LOW); // move in the LOW direction
    // Serial.println("1");
  if (digitalRead(button1) == LOW && digitalRead(button2) == HIGH ) { // if either button is pressed
    // Serial.println("adios");
    // set a HIGH value to our step pin, this turns the voltage on for that pin
    digitalWrite(stepPin , HIGH); 
    // let's wait here for 50 milliseconds; note the units, this means 0.05s
    delay(r);
    // let's set our step pin to false, this turns the voltage off for that pin and gives us the on/off cycle we need
    digitalWrite(stepPin , LOW);
    // wait another 50 milliseconds after which time we loop back to the beginning of the loop() loop
    delay(r);
    }
      } else if (digitalRead(button2) == LOW && digitalRead(button1) == HIGH) { // if btton1 is not pressed and button2 is pressed
    digitalWrite(dirPin, HIGH); // move in HIGH direction
    // Serial.println("2");
        }
 
  if (digitalRead(button2) == LOW && digitalRead(button1) == HIGH ) { // if either button is pressed
    // Serial.println("adios");
    if (dist < 110){
    // set a HIGH value to our step pin, this turns the voltage on for that pin
    digitalWrite(stepPin , HIGH); 
    // let's wait here for 50 milliseconds; note the units, this means 0.05s
    delay(r);
    // let's set our step pin to false, this turns the voltage off for that pin and gives us the on/off cycle we need
    digitalWrite(stepPin , LOW);
    // wait another 50 milliseconds after which time we loop back to the beginning of the loop() loop
    delay(r);
      }
    }
      if(flancoSubida(BTN_MENU)) { // Transición BTN_EXIT
        estado = S_SET_R;
        printRed();
        break;
      }

      if(I > 0.299) { // Transición BTN_EXIT
        estado = S_SET_R;
        printRed();
        break;
      }
      break; /*** FIN ESTADO S_SET_G ***/
  }
 

}
